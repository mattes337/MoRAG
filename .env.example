# MoRAG Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# API Keys
# =============================================================================

# Google AI (Gemini) API Key - Required for LLM operations
GEMINI_API_KEY=your_gemini_api_key_here
GEMINI_MODEL=gemini-pro
GEMINI_EMBEDDING_MODEL=text-embedding-004
GEMINI_VISION_MODEL=gemini-1.5-flash

# OpenAI API Key - Optional, for OpenAI models
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API Key - Optional, for Claude models
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# =============================================================================
# API Configuration
# =============================================================================
MORAG_API_HOST=0.0.0.0
MORAG_API_PORT=8000
MORAG_API_WORKERS=4

# =============================================================================
# Database Configuration
# =============================================================================

# Qdrant Vector Database Configuration
QDRANT_HOST=localhost
QDRANT_PORT=6333
QDRANT_COLLECTION_NAME=morag_documents
QDRANT_API_KEY=
QDRANT_URL=http://localhost:6333

# Redis Configuration (for Celery and caching)
REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# Task Queue
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# =============================================================================
# Application Configuration
# =============================================================================

# Environment (development, staging, production)
MORAG_ENVIRONMENT=development

# Debug mode
MORAG_DEBUG=true

# Logging
MORAG_LOG_LEVEL=INFO
MORAG_LOG_FORMAT=json

# =============================================================================
# File Storage
# =============================================================================
MORAG_UPLOAD_DIR=./uploads
MORAG_TEMP_DIR=./temp
MORAG_DATA_DIR=./data
MORAG_LOGS_DIR=./logs
MORAG_MAX_FILE_SIZE=100MB

# Upload Size Limits
# Maximum upload size in bytes (takes precedence over MORAG_MAX_FILE_SIZE)
# Examples: 104857600 (100MB), 5368709120 (5GB), 10737418240 (10GB)
MORAG_MAX_UPLOAD_SIZE_BYTES=5368709120

# =============================================================================
# Security
# =============================================================================
MORAG_API_KEY_HEADER=X-API-Key
MORAG_ALLOWED_ORIGINS=["http://localhost:3000"]
MORAG_SECRET_KEY=your_secret_key_here
MORAG_CORS_ORIGINS=http://localhost:3000,http://localhost:8080

# =============================================================================
# Device Configuration
# =============================================================================
# Preferred device for AI processing (auto, cpu, cuda)
MORAG_PREFERRED_DEVICE=auto
# Force CPU usage even if GPU is available
MORAG_FORCE_CPU=false
# Disable docling for CPU compatibility (set to true if experiencing SIGILL errors)
# Docling now works with CPU-only mode when MORAG_FORCE_CPU=true
MORAG_DISABLE_DOCLING=false

# =============================================================================
# Processing Configuration
# =============================================================================
MORAG_MAX_CONCURRENT_TASKS=10
MORAG_WEBHOOK_TIMEOUT=30

# Document Processing Configuration
MORAG_DEFAULT_CHUNKING_STRATEGY=page
MORAG_ENABLE_PAGE_BASED_CHUNKING=true
MORAG_MAX_PAGE_CHUNK_SIZE=8000

# Chunk Size Configuration
MORAG_DEFAULT_CHUNK_SIZE=4000
MORAG_DEFAULT_CHUNK_OVERLAP=200
MORAG_MAX_TOKENS_PER_CHUNK=8000

# Chunk size recommendations:
# - 1000-2000: Fine-grained retrieval, more precise matching
# - 4000-6000: Balanced context and precision (recommended)
# - 8000-12000: Maximum context, fewer chunks

# Audio Processing Configuration
# Whisper model size (tiny, base, small, medium, large-v2, large-v3)
MORAG_WHISPER_MODEL_SIZE=base
# Alternative variable name (both are supported)
WHISPER_MODEL_SIZE=base

# Audio language (optional, auto-detect if not set)
# MORAG_AUDIO_LANGUAGE=en

# Audio device (auto, cpu, cuda)
MORAG_AUDIO_DEVICE=auto

# Enable/disable features
MORAG_ENABLE_SPEAKER_DIARIZATION=true
MORAG_ENABLE_TOPIC_SEGMENTATION=true

# SpaCy model for topic segmentation (en_core_web_sm, de_core_news_sm, etc.)
# MORAG_SPACY_MODEL=en_core_web_sm

# Video Processing Configuration
MORAG_EXTRACT_AUDIO=true
MORAG_EXTRACT_FRAMES=false
MORAG_FRAME_INTERVAL=1.0
MORAG_ENABLE_VIDEO_OCR=false

# Web Processing Configuration
MORAG_USER_AGENT=MoRAG/1.0
MORAG_REQUEST_TIMEOUT=30
MORAG_MAX_CONTENT_LENGTH=10485760
MORAG_ENABLE_JS_RENDERING=false

# Embedding Configuration
MORAG_EMBEDDING_MODEL=text-embedding-004
MORAG_EMBEDDING_DIMENSION=768
MORAG_EMBEDDING_BATCH_SIZE=10
MORAG_ENABLE_BATCH_EMBEDDING=true

# =============================================================================
# Retry Configuration
# =============================================================================
# Enable indefinite retries for rate limit errors (recommended for production)
MORAG_RETRY_INDEFINITELY=true
# Base delay between retries in seconds
MORAG_RETRY_BASE_DELAY=1.0
# Maximum delay between retries in seconds (5 minutes)
MORAG_RETRY_MAX_DELAY=300.0
# Exponential backoff multiplier
MORAG_RETRY_EXPONENTIAL_BASE=2.0
# Add random jitter to delays to avoid thundering herd
MORAG_RETRY_JITTER=true

# =============================================================================
# Celery Task Configuration
# =============================================================================
# Task timeout limits (in seconds)
# Soft limit: raises SoftTimeLimitExceeded exception for graceful cleanup
MORAG_CELERY_TASK_SOFT_TIME_LIMIT=7200  # 2 hours (default)
# Hard limit: kills the task process (should be higher than soft limit)
MORAG_CELERY_TASK_TIME_LIMIT=9000       # 2.5 hours (default)
# Worker configuration
MORAG_CELERY_WORKER_PREFETCH_MULTIPLIER=1    # Tasks per worker process
MORAG_CELERY_WORKER_MAX_TASKS_PER_CHILD=1000 # Max tasks before worker restart
