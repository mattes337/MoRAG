"""Data models for extraction agents."""

from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum


class ConfidenceLevel(str, Enum):
    """Confidence levels for extractions."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"


class FactTypeExamples:
    """Example fact types for reference only - NOT enforced.

    The system supports any domain-specific fact types generated by LLMs.
    These are provided as examples of common fact categories.
    """
    PROCEDURAL = "procedural"
    DECLARATIVE = "declarative"
    REGULATORY = "regulatory"
    TECHNICAL = "technical"
    STATISTICAL = "statistical"
    CAUSAL = "causal"
    TEMPORAL = "temporal"
    COMPARATIVE = "comparative"


# Legacy entity and relation type examples - these are NOT enforced
# The system supports dynamic, domain-specific types generated by LLMs
class EntityTypeExamples:
    """Example entity types for reference only - NOT enforced.

    The system supports any domain-specific entity types generated by LLMs.
    These are provided as examples of common entity categories.
    """
    PERSON = "PERSON"
    ORGANIZATION = "ORGANIZATION"
    LOCATION = "LOCATION"
    CONCEPT = "CONCEPT"
    PRODUCT = "PRODUCT"
    EVENT = "EVENT"
    DATE = "DATE"
    QUANTITY = "QUANTITY"
    TECHNOLOGY = "TECHNOLOGY"
    PROCESS = "PROCESS"


class RelationTypeExamples:
    """Example relation types for reference only - NOT enforced.

    The system supports any domain-specific relation types generated by LLMs.
    These are provided as examples of common relationship categories.
    """
    SUPPORTS = "SUPPORTS"
    ELABORATES = "ELABORATES"
    CONTRADICTS = "CONTRADICTS"
    SEQUENCE = "SEQUENCE"
    COMPARISON = "COMPARISON"
    CAUSATION = "CAUSATION"
    PREREQUISITE = "PREREQUISITE"
    ALTERNATIVE = "ALTERNATIVE"
    HIERARCHY = "HIERARCHY"
    LOCATED_IN = "LOCATED_IN"
    PART_OF = "PART_OF"
    CREATED_BY = "CREATED_BY"
    RELATED_TO = "RELATED_TO"


class ExtractedFact(BaseModel):
    """A fact extracted from text."""
    
    subject: str = Field(..., description="The main entity or concept")
    object: str = Field(..., description="What the subject relates to or acts upon")
    approach: Optional[str] = Field(None, description="How something is done or implemented")
    solution: Optional[str] = Field(None, description="What problem is solved or benefit provided")
    condition: Optional[str] = Field(None, description="Under what circumstances this applies")
    remarks: Optional[str] = Field(None, description="Additional context or limitations")
    fact_type: str = Field(..., description="Type of fact (domain-specific, LLM-generated)")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score")
    keywords: List[str] = Field(default_factory=list, description="Relevant technical terms")
    source_text: Optional[str] = Field(None, description="Source text span")


class ExtractedEntity(BaseModel):
    """An entity extracted from text."""

    name: str = Field(..., description="Exact text mention")
    canonical_name: str = Field(..., description="Normalized form")
    entity_type: str = Field(..., description="Type of entity (domain-specific, LLM-generated)")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score")
    attributes: Dict[str, Any] = Field(default_factory=dict, description="Additional properties")
    start_offset: Optional[int] = Field(None, description="Character position in text")
    end_offset: Optional[int] = Field(None, description="End character position")
    context: Optional[str] = Field(None, description="Surrounding context")


class ExtractedRelation(BaseModel):
    """A relation extracted between entities."""

    source_entity: str = Field(..., description="Source entity name")
    target_entity: str = Field(..., description="Target entity name")
    relation_type: str = Field(..., description="Type of relation (domain-specific, LLM-generated)")
    description: str = Field(..., description="Natural language description")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score")
    context: str = Field(..., description="Text snippet supporting this relation")
    relationship_strength: str = Field(default="direct", description="Strength of relationship")
    evidence_quality: str = Field(default="explicit", description="Quality of evidence")


class ExtractedKeyword(BaseModel):
    """A keyword extracted from text."""
    
    keyword: str = Field(..., description="The keyword or phrase")
    category: str = Field(..., description="Category of keyword")
    importance: float = Field(..., ge=0.0, le=1.0, description="Importance score")
    frequency: int = Field(default=1, description="Frequency in text")
    context: Optional[str] = Field(None, description="Context where keyword appears")


class FactExtractionResult(BaseModel):
    """Result from fact extraction."""
    
    facts: List[ExtractedFact] = Field(..., description="Extracted facts")
    total_facts: int = Field(..., description="Total number of facts extracted")
    confidence: ConfidenceLevel = Field(..., description="Overall confidence")
    domain: str = Field(default="general", description="Domain context")
    language: str = Field(default="en", description="Language of text")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class EntityExtractionResult(BaseModel):
    """Result from entity extraction."""
    
    entities: List[ExtractedEntity] = Field(..., description="Extracted entities")
    total_entities: int = Field(..., description="Total number of entities")
    confidence: ConfidenceLevel = Field(..., description="Overall confidence")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class RelationExtractionResult(BaseModel):
    """Result from relation extraction."""
    
    relations: List[ExtractedRelation] = Field(..., description="Extracted relations")
    total_relations: int = Field(..., description="Total number of relations")
    confidence: ConfidenceLevel = Field(..., description="Overall confidence")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class KeywordExtractionResult(BaseModel):
    """Result from keyword extraction."""
    
    keywords: List[ExtractedKeyword] = Field(..., description="Extracted keywords")
    total_keywords: int = Field(..., description="Total number of keywords")
    confidence: ConfidenceLevel = Field(..., description="Overall confidence")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
