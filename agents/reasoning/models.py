"""Data models for reasoning agents."""

from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum


class ReasoningStrategyExamples:
    """Example reasoning strategies for reference only - NOT enforced.

    The system supports any domain-specific strategies generated by LLMs.
    These are provided as examples of common reasoning strategies.
    """
    FORWARD = "forward"
    BACKWARD = "backward"
    BIDIRECTIONAL = "bidirectional"
    BREADTH_FIRST = "breadth_first"
    DEPTH_FIRST = "depth_first"


class ConfidenceLevelExamples:
    """Example confidence levels for reference only - NOT enforced.

    The system supports any domain-specific confidence levels generated by LLMs.
    These are provided as examples of common confidence categories.
    """
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"


class PathSelectionResult(BaseModel):
    """Result from path selection."""

    selected_paths: List[Dict[str, Any]] = Field(..., description="Selected reasoning paths")
    selection_strategy: str = Field(..., description="Strategy used for selection")
    confidence: str = Field(..., description="Confidence in selection (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")

    @property
    def total_paths_considered(self) -> int:
        """Get total paths considered from metadata."""
        return self.metadata.get("total_paths_considered", len(self.selected_paths))

    @property
    def selection_criteria(self) -> Dict[str, Any]:
        """Get selection criteria from metadata."""
        return self.metadata.get("selection_criteria", {})


class ReasoningResult(BaseModel):
    """Result from reasoning process."""

    conclusion: str = Field(..., description="Main conclusion")
    steps: List[Dict[str, Any]] = Field(..., description="Steps in reasoning process")
    reasoning_type: str = Field(..., description="Type of reasoning used")
    confidence: str = Field(..., description="Confidence in reasoning (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")

    @property
    def reasoning_steps(self) -> List[str]:
        """Get reasoning steps as list of strings."""
        return [step.get("description", str(step)) for step in self.steps]

    @property
    def evidence(self) -> List[str]:
        """Get evidence from metadata."""
        return self.metadata.get("evidence", [])

    @property
    def alternative_conclusions(self) -> List[str]:
        """Get alternative conclusions from metadata."""
        return self.metadata.get("alternative_conclusions", [])


class DecisionResult(BaseModel):
    """Result from decision making."""

    recommended_option: str = Field(..., description="Recommended option/decision")
    reasoning: str = Field(..., description="Reasoning for the decision")
    confidence: str = Field(..., description="Confidence in decision (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")

    @property
    def decision(self) -> str:
        """Get decision (alias for recommended_option)."""
        return self.recommended_option

    @property
    def rationale(self) -> str:
        """Get rationale (alias for reasoning)."""
        return self.reasoning

    @property
    def alternatives(self) -> List[Dict[str, Any]]:
        """Get alternatives from metadata."""
        return self.metadata.get("alternatives", [])

    @property
    def risk_assessment(self) -> Dict[str, Any]:
        """Get risk assessment from metadata."""
        risk_data = self.metadata.get("risk_assessment", "unknown")
        if isinstance(risk_data, str):
            return {"level": risk_data}
        return risk_data


class ContextAnalysisResult(BaseModel):
    """Result from context analysis."""

    context_summary: str = Field(..., description="Summary of context")
    key_factors: List[str] = Field(..., description="Key contextual factors")
    relevance_score: float = Field(..., description="Overall relevance score")
    relevant_context: List[str] = Field(..., description="Relevant context elements")
    relevance_scores: Dict[str, float] = Field(default_factory=dict, description="Relevance scores for different aspects")
    context_gaps: List[str] = Field(default_factory=list, description="Identified gaps in context")
    confidence: str = Field(..., description="Confidence in analysis (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
