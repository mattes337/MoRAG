"""Data models for processing agents."""

from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum


class ConfidenceLevelExamples:
    """Example confidence levels for reference only - NOT enforced.

    The system supports any domain-specific confidence levels generated by LLMs.
    These are provided as examples of common confidence categories.
    """
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"


class ChunkingResult(BaseModel):
    """Result from chunking."""

    chunks: List[Dict[str, Any]] = Field(..., description="Text chunks with metadata")
    total_chunks: int = Field(..., description="Total number of chunks")
    chunking_method: str = Field(..., description="Method used for chunking")
    confidence: str = Field(..., description="Confidence in chunking (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class ClassificationResult(BaseModel):
    """Result from classification."""

    primary_category: str = Field(..., description="Primary predicted category")
    subcategories: List[str] = Field(default_factory=list, description="Subcategories")
    confidence: str = Field(..., description="Overall confidence (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class ValidationResult(BaseModel):
    """Result from validation."""

    validation_status: str = Field(..., description="Validation status (valid/invalid)")
    validation_errors: List[str] = Field(default_factory=list, description="Validation errors")
    issues_found: List[str] = Field(default_factory=list, description="Issues found during validation")
    confidence: str = Field(..., description="Confidence in validation (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")

    @property
    def is_valid(self) -> bool:
        """Check if validation status indicates validity."""
        return self.validation_status.lower() == "valid"

    @property
    def quality_score(self) -> float:
        """Calculate quality score from validation checks."""
        validation_checks = self.metadata.get("validation_checks", [])
        if not validation_checks:
            return 0.5

        total_score = sum(check.get("score", 0) for check in validation_checks)
        return total_score / len(validation_checks)


class FilteringResult(BaseModel):
    """Result from filtering."""

    filtered_items: List[Any] = Field(..., description="Items that passed filtering")
    rejected_items: List[Any] = Field(default_factory=list, description="Items that were rejected")
    filter_criteria: Dict[str, Any] = Field(..., description="Criteria used for filtering")
    confidence: str = Field(..., description="Confidence in filtering (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class TopicBoundary(BaseModel):
    """Represents a topic boundary in text."""

    position: int = Field(..., description="Character position of the boundary")
    confidence: float = Field(..., description="Confidence score for this boundary")
    topic_change: bool = Field(..., description="Whether this represents a topic change")
    boundary_type: str = Field(..., description="Type of boundary (topic, section, paragraph)")


class SemanticChunkingResult(BaseModel):
    """Result from semantic chunking."""

    chunks: List[str] = Field(..., description="Text chunks")
    boundaries: List[TopicBoundary] = Field(..., description="Identified topic boundaries")
    chunking_strategy: str = Field(..., description="Strategy used for chunking")
    confidence: str = Field(..., description="Confidence in chunking (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
