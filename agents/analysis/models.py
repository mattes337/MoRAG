"""Data models for analysis agents."""

from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum


class QueryIntentExamples:
    """Example query intent categories for reference only - NOT enforced.

    The system supports any domain-specific intents generated by LLMs.
    These are provided as examples of common intent categories.
    """
    SEARCH = "search"
    QUESTION = "question"
    COMPARISON = "comparison"
    ANALYSIS = "analysis"
    PROCEDURE = "procedure"
    RECOMMENDATION = "recommendation"
    CLARIFICATION = "clarification"
    SUMMARY = "summary"
    CREATION = "creation"
    TROUBLESHOOTING = "troubleshooting"


class QueryTypeExamples:
    """Example query type categories for reference only - NOT enforced.

    The system supports any domain-specific types generated by LLMs.
    These are provided as examples of common query types.
    """
    FACTUAL = "factual"
    ANALYTICAL = "analytical"
    PROCEDURAL = "procedural"
    COMPARATIVE = "comparative"
    TEMPORAL = "temporal"
    SPATIAL = "spatial"
    CAUSAL = "causal"
    HYPOTHETICAL = "hypothetical"


class ComplexityLevelExamples:
    """Example complexity levels for reference only - NOT enforced.

    The system supports any domain-specific complexity levels generated by LLMs.
    These are provided as examples of common complexity categories.
    """
    SIMPLE = "simple"
    MEDIUM = "medium"
    COMPLEX = "complex"


class ConfidenceLevelExamples:
    """Example confidence levels for reference only - NOT enforced.

    The system supports any domain-specific confidence levels generated by LLMs.
    These are provided as examples of common confidence categories.
    """
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"


class SentimentPolarityExamples:
    """Example sentiment polarity categories for reference only - NOT enforced.

    The system supports any domain-specific sentiment categories generated by LLMs.
    These are provided as examples of common sentiment polarities.
    """
    POSITIVE = "positive"
    NEGATIVE = "negative"
    NEUTRAL = "neutral"
    MIXED = "mixed"


class QueryAnalysisResult(BaseModel):
    """Result from query analysis."""

    intent: str = Field(..., description="Primary intent of the query (domain-specific, LLM-generated)")
    entities: List[str] = Field(default_factory=list, description="Entities mentioned in query")
    keywords: List[str] = Field(default_factory=list, description="Important keywords")
    query_type: str = Field(..., description="Type of query (domain-specific, LLM-generated)")
    complexity: str = Field(..., description="Complexity level (domain-specific, LLM-generated)")
    confidence: str = Field(..., description="Confidence in analysis (domain-specific, LLM-generated)")
    domain: str = Field(default="general", description="Domain of the query")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class ContentAnalysisResult(BaseModel):
    """Result from content analysis."""

    main_topics: List[str] = Field(..., description="Main topics identified")
    key_concepts: List[str] = Field(..., description="Key concepts")
    content_type: str = Field(..., description="Type of content")
    complexity: str = Field(..., description="Content complexity (domain-specific, LLM-generated)")
    readability_score: Optional[float] = Field(None, description="Readability score")
    word_count: int = Field(..., description="Word count")
    confidence: str = Field(..., description="Confidence in analysis (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class SentimentAnalysisResult(BaseModel):
    """Result from sentiment analysis."""

    polarity: str = Field(..., description="Overall sentiment polarity (domain-specific, LLM-generated)")
    intensity: float = Field(..., ge=0.0, le=1.0, description="Sentiment intensity")
    emotions: Dict[str, float] = Field(default_factory=dict, description="Emotion scores")
    confidence: str = Field(..., description="Confidence in analysis (domain-specific, LLM-generated)")
    aspects: List[Dict[str, Any]] = Field(default_factory=list, description="Aspect-based sentiment")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class TopicAnalysisResult(BaseModel):
    """Result from topic analysis."""

    primary_topic: str = Field(..., description="Primary topic")
    secondary_topics: List[str] = Field(default_factory=list, description="Secondary topics")
    topic_distribution: Dict[str, float] = Field(..., description="Topic probability distribution")
    coherence_score: float = Field(..., ge=0.0, le=1.0, description="Topic coherence score")
    confidence: str = Field(..., description="Confidence in analysis (domain-specific, LLM-generated)")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
